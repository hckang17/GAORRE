class WaitingScreenLegacy {
    // 이 아래부터는... LECAGY가 될 확률 높음.. 아니면 다 분리해서 디자인 해야함.

//   Widget buildInitialScreen() {
//     return Center(
//       child: Column(
//         mainAxisAlignment: MainAxisAlignment.center,
//         children: [
//           Text('매장코드 : $storeCode', style: TextStyle(fontSize: 20)),
//           ElevatedButton(
//             onPressed: () {ref.read(waitingProvider.notifier).sendWaitingData(loginData!.storeCode);}, // No action needed, already subscribed and data sent
//             child: Text("웨이팅정보 수신하기"),
//           ),
//         ],
//       ),
//     );
//   }

//   Widget buildWaitingScreen() {
//     _startTimerForTeamDeletion(ref);
//     return Center(
//       child: Column(
//         mainAxisAlignment: MainAxisAlignment.center,
//         children: [
//           Consumer(
//             builder: (context, ref, child) {
//               ref.watch(waitingProvider);
//               final currentWaitingCount = ref.watch(waitingProvider.select((data) => data?.teamInfoList.length ?? 0));
//               return Text('현재 대기 팀수 : $currentWaitingCount', style: TextStyle(fontSize: 24));
//             },
//           ),
//           ElevatedButton(onPressed: () {
//             ref.read(loginProvider.notifier).logout();
//             Navigator.pop(context);
//             }, child: Text('로그아웃')),
//           ElevatedButton(onPressed: () {
//             ref.read(storeDataProvider.notifier).changeAvailableStatus(loginData!);
//             },
//             child: Text('현재 웨이팅 가능 상태 : $waitingAvailableState. 0이면 웨이팅추가가능, 1이면 웨이팅추가불가')
//             ),
//           Expanded(
//             child: ListView.builder(
//               itemCount: currentWaitingData!.teamInfoList.length,
//               itemBuilder: (context, index) {
//                 WaitingTeam? team = currentWaitingData!.teamInfoList[index];
//                 return ListTile(
//                   title: Text('예약 번호 : ${team.waitingNumber}'),
//                   subtitle: buildSubtitle(team),
//                   trailing: buildTrailingButtons(team, ref),
//                 );
//               },
//             ),
//           ),
//           // buildFooterButtons(),
//         ],
//       ),
//     );
//   }

//   Column buildSubtitle(WaitingTeam team) {
//     return Column(
//       crossAxisAlignment: CrossAxisAlignment.start,
//       children: [
//         Text('상태 : ${_getGuestStatus(team.status)}'),
//         Text('연락처 : ${team.phoneNumber}'),
//         if (team.entryTime != null)
//           StreamBuilder<Duration>(
//             stream: startCountdown(team.entryTime),
//             builder: (context, snapshot) {
//               if (snapshot.connectionState == ConnectionState.waiting) {
//                 return Text('Calculating...');
//               } else if (snapshot.hasData) {
//                 final mins = snapshot.data!.inMinutes.remainder(60).toString().padLeft(2, '0');
//                 final secs = snapshot.data!.inSeconds.remainder(60).toString().padLeft(2, '0');
//                 return Text('입장마감까지 남은 시간 : $mins:$secs');
//               } else {
//                 return Text('Time expired');
//               }
//             },
//           ),
//       ],
//     );
//   }

//   Row buildTrailingButtons(WaitingTeam team, WidgetRef ref) {
//     return Row(
//       mainAxisSize: MainAxisSize.min,
//       children: [
//         CallIconButton(
//           phoneNumber: team.phoneNumber,
//           waitingNumber: team.waitingNumber,
//           storeCode: storeCode,
//           minutesToAdd: minutesToAdd,
//           ref: ref,
//         ),
//         SizedBox(width: 8),
//         ElevatedButton(
//           onPressed: () => ref.read(waitingProvider.notifier).requestUserDelete(ref.context, storeCode, team.waitingNumber),
//           child: const Text('웨이팅 삭제하기'),
//         ),
//       ],
//     );
//   }

//   // Row buildFooterButtons() {
//   //   return Row(
//   //     mainAxisAlignment: MainAxisAlignment.spaceEvenly,
//   //     children: [
//   //       ElevatedButton(
//   //         onPressed: () {
//   //           ref.read(waitingProvider.notifier).requestUserCall(
//   //             ref,
//   //             currentWaitingData!.teamInfoList[0].phoneNumber,
//   //             currentWaitingData!.teamInfoList[0].waitingNumber,
//   //             storeCode,
//   //             minutesToAdd);
//   //         },
//   //         child: Text('다음손님 호출하기'),
//   //       ),
//   //       ElevatedButton(
//   //         onPressed: () {
//   //           Navigator.of(ref.context).push(MaterialPageRoute(
//   //             builder: (BuildContext context) =>
//   //               ManagementScreenWidget()));
//   //         },
//   //         child: Text('가게 정보 수정하기'),
//   //       ),
//   //       ElevatedButton(
//   //         onPressed: () {
//   //           Navigator.of(ref.context).push(MaterialPageRoute(
//   //             builder: (BuildContext context) =>
//   //               TableManagementScreen()));
//   //         },
//   //         child: Text('테이블 관리하기'),
//   //       ),
//   //     ],
//   //   );
//   // }

//   // Widget buildAddingWaitingTeam() {
//   //   return FloatingActionButton(
//   //     onPressed: () => showAddWaitingDialog(ref.context),
//   //     child: Icon(Icons.person_add),
//   //     tooltip: '웨이팅팀 수동 추가하기',);
//   // }

//   String _getGuestStatus(int status) {
//     switch (status) {
//       case 1: return '대기중';
//       case 2: return '착석 완료';
//       case 3: return '삭제 완료';
//       default: return 'Unknown';
//     }
//   }

//   Stream<Duration> startCountdown(DateTime? startTime) {
//     return Stream.periodic(Duration(seconds: 1), (count) {
//       return startTime!.difference(DateTime.now());
//     }).map((duration) => Duration(seconds: duration.inSeconds.abs()));
//   }

//   void _startTimerForTeamDeletion(WidgetRef ref) {
//     _timer?.cancel();
//     _timer = Timer.periodic(Duration(seconds: 1), (timer) async {
//       for (var team in currentWaitingData!.teamInfoList) {
//         if (team.entryTime != null && team.entryTime!.difference(DateTime.now()) <= Duration.zero) {
//           await ref.read(waitingProvider.notifier).requestUserDelete(ref.context, storeCode, team.waitingNumber);
//           break;
//         }
//       }
//     });
//   }
// }
}